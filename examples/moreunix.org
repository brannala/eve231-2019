* File permissions
** Basic Introduction

| Command | Explanation                                |   |
|---------+--------------------------------------------+---|
| ls -l   | long form list of files                    |   |
| chmod   | changes permissions of a file or directory |   |
| chgrp   | changes group of file                      |   |
| chown   | changes owner of file                      |   |
|         |                                            |   |
|         |                                            |   |
|         |                                            |   |
|         |                                            |   |
|         |                                            |   |

Example ls -l output:

-rw-rw-r-- 1 bruce bruce 0 Oct  1 01:02 test.txt

| Category   | Operation                      | Permission             |
|------------+--------------------------------+------------------------|
| u = User   | + = Adds permission            | r = Read permission    |
| g = Group  | - = Removes permission         | w = Write permission   |
| o = Others | '=' = Adds absolute permission | x = Execute permission |
| a = All    |                                |                        |
|------------+--------------------------------+------------------------|

drwxrwxr-x  7 bruce bruce 4096 Oct  1 00:51 eve231-2019
| Command              | Explanation                                                    |
|----------------------+----------------------------------------------------------------|
| chmod g-r test.txt   | removes read permission for group bruce                        |
| chmod u-w test.txt   | removes write permission for user bruce                        |
| chmod ug+rw test.txt | adds read and write permissions for user bruce and group bruce |
|----------------------+----------------------------------------------------------------|

*** Octal Notation
Read permission = 4
Write permission = 2
Execute permission = 1
4+1 = 4
4+2 = 6 = rw
4+2+1 = 7 = rwx

chmod 666 test.txt -> -r--r--r--
chmod 251 test.txt -> --w-r-x--x

* Looking at files
** Basic Commands

Identify file types:

file ~/bin/*

bin/begindryrsync: Bourne-Again shell script text executable, ASCII text
bin/beginrsync:    Bourne-Again shell script text executable, ASCII text
bin/bpp:           Mach-O 64-bit executable x86_64
bin/enddryrsync:   Bourne-Again shell script text executable, ASCII text
bin/endrsync:      Bourne-Again shell script text executable, ASCII text
bin/getical:       Bourne-Again shell script text executable, ASCII text
bin/getical.orig:  Bourne-Again shell script text executable, ASCII text
bin/ical2org.py:   Python script text executable, ASCII text
bin/importical.el: ASCII text
bin/jekrun:        Bourne-Again shell script text executable, ASCII text
bin/lucl:          Bourne-Again shell script text executable, ASCII text
bin/mountsyn:      Bourne-Again shell script text executable, ASCII text
bin/runsage:       Bourne-Again shell script text executable, ASCII text
bin/sage:          Bourne-Again shell script text executable, ASCII text
bin/siteupload:    Bourne-Again shell script text executable, ASCII text
bin/unmountsyn:    Bourne-Again shell script text executable, ASCII text
bin/webp:          ASCII text

Compare text files:
more text.txt
cmp text.txt text2.txt
diff -y test.txt test2.txt

Create a file archive:

Using the tar (tape archive) function:

tar -cvf sand.tar sandbox

Create a compressed file archive:

tar -czvf sand.tgz sandbox

Test unpack an uncompressed archive:
 tar -tvf sand.tar

Unpack an uncompressed archive:
 tar -xvf sand.tar

Unpack a compressed archive:
 tar -xvzf sand.tgz

Use zip and unzip for archiving and extracting zip files


* Shell configuration files
** Bash shell variables
Shell variable names are all uppercase. If you place a dollar sign in front of the variable this references the value of the variable. To set the value of variable EDITOR in your current shell session to EMACS use

export EDITOR=emacs

To print the value of the variable EDITOR to screen use

echo $EDITOR
 
Use the echo command to print current values of shell variables:
-- print the current shell

echo $SHELL

-- print the default editor

echo $EDITOR

-- print name of current user

echo $USER

Edit your bash shell configuration file (.bash_profile on Mac, .bashrc on Ubuntu)
-- look at your current file:

cd
more .bash_profile

-- open the bash file using emacs

emacs .bash_profile

-- then add the following lines

# Add path to local binaries
PATH=$PATH:$HOME/bin:/usr/local/bin
# Set command prompt to user name
PS1='$USER$'
# Set default editor to emacs
export EDITOR=emacs

-- save the edited file using C-x C-s and quit emacs using C-x C-c

The configuration file is only read at the start of a shell session so you need to close your terminal and open a new one.
